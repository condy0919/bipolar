# Stole from drake
# This file is included by //tools:bazel.rc

### Kcov coverage build. ###
build:kcov --build_tests_only
build:kcov -c dbg
build:kcov --spawn_strategy=standalone
build:kcov --run_under //tools/dynamic_analysis:kcov
build:kcov --local_test_jobs=1
build:kcov --test_tag_filters=-benchmark
build:kcov --nocache_test_results
# These increased timeouts were set through experimentation. Because kcov runs
# in a separate process from the main program, the OS has to context-switch
# between the processes every time a line is hit, slowing down execution
# significantly. Timeouts are 3.5x default values.
build:kcov --test_timeout=210,1050,3150,12600

### ASan build. Clang only. ###
build:asan --build_tests_only
build:asan -c dbg
# https://github.com/google/sanitizers/wiki/AddressSanitizer#faq
build:asan --copt=-fno-common
build:asan --copt=-fsanitize=address
build:asan --copt=-fsanitize-address-use-after-scope
build:asan --copt=-fstandalone-debug
build:asan --copt=-O0
build:asan --copt=-fno-omit-frame-pointer
build:asan --linkopt=-fsanitize=address
build:asan --linkopt=-fsanitize-address-use-after-scope
build:asan --run_under=//tools/dynamic_analysis:asan
build:asan --test_env=ASAN_OPTIONS
build:asan --test_env=LSAN_OPTIONS
build:asan --test_env=ASAN_SYMBOLIZER_PATH
build:asan --test_env=LSAN_SYMBOLIZER_PATH
# LSan is run with ASan by default
build:asan --test_tag_filters=-benchmark
# Typical slowdown introduced by AddressSanitizer is 2x.
# See https://clang.llvm.org/docs/AddressSanitizer.html
build:asan --test_timeout=150,750,2250,9000  # 2.5x

### LSan build. Clang only. ###
build:lsan --build_tests_only
build:lsan -c dbg
build:lsan --copt=-fno-common
build:lsan --copt=-fsanitize=leak
build:lsan --copt=-fstandalone-debug
build:lsan --copt=-fno-omit-frame-pointer
build:lsan --linkopt=-fsanitize=leak
build:lsan --run_under=//tools/dynamic_analysis:lsan
build:lsan --test_env=LSAN_OPTIONS
build:lsan --test_env=LSAN_SYMBOLIZER_PATH
build:lsan --test_tag_filters=-benchmark

### TSan build. ###
build:tsan --build_tests_only
build:tsan --copt=-g
build:tsan --copt=-fsanitize=thread
build:tsan --copt=-O1
build:tsan --copt=-fno-omit-frame-pointer
# From Tsan documentation for Clang-3.9:
# fsanitize=thread flag will cause Clang to act as though the -fPIE flag
# had been supplied if compiling without -fPIC, and as though the
# -pie flag had been supplied if linking an executable
# Bug in GCC: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=67308
build:tsan --noforce_pic
build:tsan --linkopt=-fsanitize=thread
build:tsan --run_under=//tools/dynamic_analysis:tsan
build:tsan --test_env=TSAN_OPTIONS
build:tsan --test_tag_filters=-benchmark
# Typical slowdown introduced by ThreadSanitizer is about 5x-15x
# See https://clang.llvm.org/docs/ThreadSanitizer.html
build:tsan --test_timeout=300,1500,5400,18000

### UBSan build. ###
build:ubsan --build_tests_only
build:ubsan --copt=-g
build:ubsan --copt=-fsanitize=undefined
# Since Bazel uses clang instead of clang++, enabling -fsanitize=vptr would
# require extra linkopts that cause segmentation faults on pure C code.
build:ubsan --copt=-fno-sanitize=float-divide-by-zero,vptr
build:ubsan --copt=-O1
build:ubsan --copt=-fno-omit-frame-pointer
build:ubsan --linkopt=-fsanitize=undefined
build:ubsan --run_under=//tools/dynamic_analysis:ubsan
build:ubsan --test_env=UBSAN_OPTIONS
build:ubsan --test_tag_filters=-benchmark
# Typical slowdown introduced by UBSan is 1.2x, increasing timeouts to 2x.
# See https://developer.apple.com/documentation/code_diagnostics/undefined_behavior_sanitizer
build:ubsan --test_timeout=120,600,1800,7200
