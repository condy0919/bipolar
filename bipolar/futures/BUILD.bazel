load(
    "//bipolar:copts/configure_copts.bzl",
    "BIPOLAR_DEFAULT_COPTS",
    "BIPOLAR_DEFAULT_LINKOPTS",
    "BIPOLAR_TEST_COPTS",
)

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

cc_library(
    name = "futures",
    srcs = [
        "scheduler.cpp",
        "single_threaded_executor.cpp",
    ],
    hdrs = [
        "async_result.hpp",
        "context.hpp",
        "executor.hpp",
        "future_inl.hpp",
        "internal/adaptor.hpp",
        "pending_task.hpp",
        "promise.hpp",
        "scheduler.hpp",
        "single_threaded_executor.hpp",
        "suspended_task.hpp",
        "traits.hpp",
    ],
    copts = BIPOLAR_DEFAULT_COPTS,
    linkopts = BIPOLAR_DEFAULT_LINKOPTS,
    deps = [
        "//bipolar/core",
        "@boost//:callable_traits",
        "@boost//:noncopyable",
    ],
)

cc_test(
    name = "futures_test",
    srcs = [
        "tests/async_result_test.cpp",
        "tests/future_test.cpp",
        "tests/pending_task_test.cpp",
        "tests/promise_test.cpp",
        "tests/scheduler_test.cpp",
        "tests/single_threaded_executor_test.cpp",
        "tests/suspended_task_test.cpp",
    ],
    copts = BIPOLAR_TEST_COPTS,
    linkopts = BIPOLAR_DEFAULT_LINKOPTS,
    deps = [
        ":futures",
        "@gtest//:gtest_main",
    ],
)

cc_binary(
    name = "promise_example",
    srcs = [
        "examples/promise.cpp",
    ],
    copts = BIPOLAR_TEST_COPTS,
    linkopts = BIPOLAR_DEFAULT_LINKOPTS + ["-pthread"],
    tags = ["example"],
    deps = [
        ":futures",
    ],
)

cc_binary(
    name = "future_example",
    srcs = [
        "examples/future.cpp",
    ],
    copts = BIPOLAR_TEST_COPTS,
    linkopts = BIPOLAR_DEFAULT_LINKOPTS + ["-pthread"],
    tags = ["example"],
    deps = [
        ":futures",
    ],
)
